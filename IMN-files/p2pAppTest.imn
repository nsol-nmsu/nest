node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth0
	 ip address 10.0.0.1/24
	 ipv6 address 2001::1/64
	 mac address 00:00:00:aa:00:08
	!
    }
    canvas c1
    iconcoords {143.0 116.0}
    labelcoords {143.0 148.0}
    custom-image /usr/local/share/core/icons/normal/router.gif
    services {RIP vtysh IPForward pcap}
    interface-peer {eth0 n2}
    custom-config {
	custom-config-id service:pcap
	custom-command pcap
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command pcap.sh
	config {
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit pcap file length, -n disable name resolution)
	DUMPOPTS="-n"
	TSHARK_PATH=/home/seraph/Desktop/tshark_output
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} -w n1.eth0.pcap -i eth0 < /dev/null &
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${TSHARK_PATH}/pcap
	    mv *.pcap ${TSHARK_PATH}/pcap
	fi;
	}
    }
}

node n2 {
    type router
    model router
    network-config {
	hostname n2
	!
	interface eth0
	 ip address 10.0.0.2/24
	 ipv6 address 2001::2/64
	 mac address 00:00:00:aa:00:09
	!
    }
    canvas c1
    iconcoords {144.0 307.0}
    labelcoords {144.0 339.0}
    custom-image /usr/local/share/core/icons/normal/router.gif
    services {RIP vtysh IPForward pcap}
    interface-peer {eth0 n1}
    custom-config {
	custom-config-id service:pcap
	custom-command pcap
	config {
	files=('pcap.sh', )
	}
    }
    custom-config {
	custom-config-id service:pcap:pcap.sh
	custom-command pcap.sh
	config {
	#!/bin/sh
	# set tcpdump options here (see 'man tcpdump' for help)
	# (-s snap length, -C limit pcap file length, -n disable name resolution)
	DUMPOPTS="-n"
	TSHARK_PATH=/home/seraph/Desktop/tshark_output
	
	if [ "x$1" = "xstart" ]; then
	
	tcpdump ${DUMPOPTS} -w n2.eth0.pcap -i eth0 < /dev/null &
	
	elif [ "x$1" = "xstop" ]; then
	    mkdir -p ${TSHARK_PATH}/pcap
	    mv *.pcap ${TSHARK_PATH}/pcap
	fi;
	}
    }
}

link l1 {
    ber 10.0
    delay 160
    nodes {n1 n2}
    bandwidth 10000000
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 1
}

option session {
    controlnet=
    controlnet_updown_script=
    enablerj45=1
    enablesdt=0
    preservedir=0
    sdturl=tcp://127.0.0.1:50000/
}

